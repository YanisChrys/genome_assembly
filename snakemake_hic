# Genome Assembly: Overall workflow

import re
import os

# todo : look into using kraken

# genome assembly pipeline
# to run per chromosome, meaning there is only 1 input each time
# must provide the appropriate setting that you need to use
# and a prefix for the file

configfile: "config.yaml"

############  SET UP PATH TO INPUT FILES AND FILE NAME STEMS AND SAVE THEM AS WILDCARDS  ############
# subreads and fasta hifi reads must be a single file.
# hic reads need to be 2 files, R1 and R2

SUBREADS=config["SUBREADS"]
HIFI=config["HIFI"]
HIC1=config["HIC1"]
HIC2=config["HIC2"]
ENZYMES=config["ENZYMES"]

#subreads and fasta hifi reads must be a single file.
#TODO add a way to handle complex file names
#save anything after split('.')[0] as variable extension
if SUBREADS:
    #READ_PATH=os.path.dirname(SUBREADS)
    SAMPLE_LABEL=os.path.basename(SUBREADS).split('.')[0]
elif HIFI:
    #    print("Subreads not provided.")
    #READ_PATH=os.path.dirname(HIFI)
    SAMPLE_LABEL=os.path.basename(HIFI).split('.')[0]
#elif not SUBREADS and not HIFI:
#    print("No appropriate input data provided.")


############  RULE ALL FILES ############

# add output files to rule all input, so that the rules containing them will be included in the workflow.
# create an empty list and append output file names to it that will then be used as the input of the "all" rule
# if a pipeline rule is defined and its output isn't found on the all rule, it simply won't run

# by default, and until another assembly program is added, hifiasm will always run

STOP_AT_HIFIASM=config["STOP_AT_HIFIASM"]
DO_FASTK=config["DO_FASTK"]
DO_BUSCO=config["DO_BUSCO"]
DO_HIC=config["DO_HIC"]
DO_CCS=config["DO_CCS"]
DO_DEDUP=config["DO_DEDUP"]
CHUNK_NMB=list(range(1,config["CHUNKS"]+1))

#remove potential special characters and dots from prefix but keep underscores
FILE_PREFIX=re.sub('[^a-zA-Z0-9 \_]', '', config["FILE_PREFIX"])


# need to constrain wildcards so that smk can better resolve ambiguous wildcards and files
# this would not be necessary if we provided a regex for our input files but here we want to
# allow for completely unknown file names
wildcard_constraints:
    chunknumber="[0-9]+",
    hic="hic[0-9]"

OUTPUT_FILES = []

# the goal here is to conditionally add files to the list of outputs so that they match the operations we wish to run
if STOP_AT_HIFIASM:
    # make sure that if the user forgot to set all other routes to false that they don't run
    # then add the hifiasm output files to rule all, if we do other steps we wouldn't need these files in there
    DO_FASTK = False
    DO_BUSCO = False
    DO_HIC = False
    DO_DEDUP = False
    hifiasm1=expand("RESULTS/GENOME_ASSEMBLY/{prefix}_alternate.fasta", prefix=FILE_PREFIX)
    hifiasm2=expand("RESULTS/GENOME_ASSEMBLY/{prefix}_primary.fasta", prefix=FILE_PREFIX)
    OUTPUT_FILES=OUTPUT_FILES + hifiasm1 + hifiasm2
if DO_FASTK:
    katgc1=expand("RESULTS/STATISTICS/FASTK/{prefix}.st.png", prefix=FILE_PREFIX)
    katgc2=expand("RESULTS/STATISTICS/FASTK/{prefix}.fi.png", prefix=FILE_PREFIX)
    katgc3=expand("RESULTS/STATISTICS/FASTK/{prefix}.ln.png", prefix=FILE_PREFIX)
    ploidyplot1=expand("RESULTS/STATISTICS/FASTK/{prefix}.pdf", prefix=FILE_PREFIX)
    genescope1=expand("RESULTS/STATISTICS/FASTKgenescopeFK/{prefix}_progress.txt", prefix=FILE_PREFIX)
    seqstats=expand("RESULTS/STATISTICS/SEQKIT/{prefix}.ccs.readStats.txt", prefix=FILE_PREFIX)
    OUTPUT_FILES=OUTPUT_FILES + katgc1 + katgc2 + katgc3 + ploidyplot1 + genescope1 + seqstats
if DO_BUSCO:
    buscoout=expand("RESULTS/BUSCO/{prefix}_busco_missing.tsv", prefix=FILE_PREFIX)
    OUTPUT_FILES=OUTPUT_FILES + buscoout
# turn path string to list and add to output
if DO_HIC:
    hicresorted1=["RESULTS/HIC/SALSA2/scaffolds_FINAL.fasta","RESULTS/HIC/SALSA2/scaffolds_FINAL.agp"]
    hicfiles=expand("DATA/{hic}.fastq.gz",hic=["hic1","hic2"])
    combined1=expand("RESULTS/HIC/RAW/{prefix}_{hic}.bam",hic=["hic1","hic2"],prefix=FILE_PREFIX)
    filt1=expand("RESULTS/HIC/FILTERED/{prefix}_{hic}_filtered.bam",hic=["hic1","hic2"],prefix=FILE_PREFIX)
    OUTPUT_FILES=OUTPUT_FILES + hicresorted1 + hicfiles + combined1 + filt1
if DO_DEDUP:
    getseqs1=expand("RESULTS/PURGE_DUPS/{prefix}_seqs_purged.hap.fa", prefix=FILE_PREFIX)
    OUTPUT_FILES=OUTPUT_FILES + getseqs1
if DO_CCS:
    checkfinished="RESULTS/PREPROCESSING/CCS_PACBIO/MERGED/check.txt"
    ccsreads=expand("DATA/{prefix}.subreads.bam",prefix=FILE_PREFIX)
    ccsout=expand("RESULTS/PREPROCESSING/CCS_PACBIO/{prefix}_{chunknumber}.ccs.bam",chunknumber=CHUNK_NMB, prefix=FILE_PREFIX)
    OUTPUT_FILES=OUTPUT_FILES + [checkfinished] + ccsout + ccsreads
elif not DO_CCS:
    hifireads1=expand("DATA/{prefix}.fastq.gz",prefix=FILE_PREFIX)
    OUTPUT_FILES=OUTPUT_FILES + hifireads1
############  RULE ALL  ############

# BRIDGE = ['a_ctg','p_ctg','p_ctg','r_utg']

# Terminal node:
rule all:
    input:
        OUTPUT_FILES

rule CP_SUBREADS_TO_SYSTEM:
    input:
        config["SUBREADS"]
    output:
        expand("DATA/{prefix}.subreads.bam",prefix=FILE_PREFIX)
    shell: """
        cp {input} {output}
    """

rule CP_HIFI_TO_SYSTEM:
    input:
        config["HIFI"]
    output:
        expand("DATA/{prefix}.fastq.gz",prefix=FILE_PREFIX)
    shell: """
        cp {input} {output}
    """

rule CP_HIC1_TO_SYSTEM:
    input:
        config["HIC1"]
    output:
        "DATA/hic1.fastq.gz"
    shell: """
        cp {input} {output}
    """

rule CP_HIC2_TO_SYSTEM:
    input:
        config["HIC2"]
    output:
        "DATA/hic2.fastq.gz"
    shell: """
        cp {input} {output}
    """

include: "makefiles/CCS.smk"
include: "makefiles/FASTK.smk"
include: "makefiles/HIFIASM.smk"
include: "makefiles/BUSCO_ONE.smk"
include: "makefiles/PURGEDUPS.smk"
include: "makefiles/HIC.smk"
